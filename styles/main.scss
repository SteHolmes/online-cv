@use "variables" as vars;
@use "breakpoints" as breakpts;
@use "animations";

:root {
  --toastify-color-progress-light: linear-gradient(to right, #4f201e, #36b0b5);
}

* {
  box-sizing: border-box;
  font-family: "Quicksand", serif;
  font-optical-sizing: auto;
  font-style: normal;
}

html,
body {
  min-height: 100vh;
  padding: 0;
  margin: 0;
}

h1, h2 {
  font-family: "Amatic SC", serif;
  font-weight: 300;
  font-style: normal;
  font-size: 4rem;
  line-height: 4.3rem;
  color: vars.$white;

  @include breakpts.breakpoint-min(md) {
    font-size: 5rem;
  }
}

h1,h2,h3,h4,h5 {
  margin: 0;
  margin-bottom: 1rem;
}

h3,h4,h5 {
  color: vars.$grey-dark;
}

p {
  font-weight: 300;
  line-height: 1.25rem;
  margin: 0;
  margin-bottom: 0.75rem;
}

a {
  color: inherit;

  &:hover {
    color: vars.$primary-dark;
    transition: color 0.3s;
  }
}

label {
  font-weight: bold;
}

.appLayout {
  background-color: vars.$black;
  min-height: 100vh;
}

.pageContent {
  padding: 20px;
  padding-bottom: 40px;
  min-height: vars.$page-content-height;
  max-width: vars.$content-max-width;
  margin: auto;
  animation: slideIn 0.7s ease-out;

  &--centred {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  section {
    width: 100%;
    margin-top: 1.5rem;
  }
}

.pageTransition {
  background-image: url('/images/stardust.png');
  animation: fadeIn 0.4s ease-in-out;

  &--geometry {
    background-image: url('/images/inspiration-geometry.png');
  }
}

.lightTheme {
  background: vars.$background-light;
}

.amaticFont {
  font-family: "Amatic SC", serif;
  font-weight: 300;
  font-style: normal;
  font-size: 5rem;
  line-height: 4.3rem;
}

.contentCard {
  padding: 20px;
  border: 1px solid #dddddd;
  background: vars.$background-light;
  border-radius: vars.$component-border-radius;

  &--titled {
    padding-top: 40px;
  }
}

.subSection {
  background: vars.$background-light;
  box-shadow: 1px 1px 4px rgba(0,0,0,0.3);
  border-radius: vars.$component-border-radius;
  padding: 1rem;
  margin-top: 1.5rem;
}

.container {
  border-radius: vars.$component-border-radius;
  overflow: hidden;
  border: 1px solid vars.$black;
}

.dualColumnLayout {
  display: flex;
  flex-direction: column;

  @include breakpts.breakpoint-min(md) {
    flex-direction: row;
  }

  &--centered {
    align-items: center;
    gap: 1rem;
  }
}

.column {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;

  &--primary {
    flex-basis: 70%;
    background: vars.$background-light;
    color: vars.$grey-dark;
    z-index: 2;
    padding: 1rem;
    box-shadow: 3px 0px 10px rgba(0,0,0,0.6);

    @include breakpts.breakpoint-min(md) {
      padding: 3rem 2.5rem 2rem 2.5rem;
    } 
  }

  &--secondary {
    display: none;

    @include breakpts.breakpoint-min(md) {
      display: block;
      flex-basis: 30%;
      background-color: vars.$grey-dark;
    }
  }
}

.imageContent {
  border-radius: vars.$component-border-radius;
}

.pageLink {
  color: vars.$primary-dark;
  font-weight: bold;
}

.pointer {
  position: absolute;
  right: -1;
  width: 0; 
  height: 0; 
  border-top: 20px solid transparent;
  border-bottom: 20px solid transparent;
  border-right: 20px solid vars.$grey-dark;
}

.headingBadge {
  position: relative;
  display: inline-block;
  padding: 5px 15px;
  border-radius: vars.$component-border-radius;
  color: vars.$white !important;
  background: vars.$primary;
  background: linear-gradient(10deg, vars.$primary-dark, vars.$primary);
  transform: translateY(20px) translateX(20px);
  z-index: 99;
  box-shadow: 0px 1px 3px rgba(0,0,0,0.3);

  h2, h3 {
    color: vars.$white !important;
    margin-bottom: 0;
  }
}

.introText {
  font-weight: bold;
}

// React-slick styling overrides

.slick-next {
  right: 0px !important;
}

.slick-prev:before,
.slick-next:before {
  color: vars.$primary !important;
  font-size: 40px !important;

  @include breakpts.breakpoint-min(md) {
    display: block !important;
  }
}

.slick-prev,
.slick-next {
  display: none !important;

  @include breakpts.breakpoint-min(md) {
    display: block !important;
  }
}